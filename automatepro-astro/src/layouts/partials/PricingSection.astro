---
import PrimaryButton from "@/components/PrimaryButton.astro";
import { markdownify } from "@/lib/utils/textConverter";
import { getEntry } from "astro:content";

interface Price {
  amount: number;
  period: "year" | "month";
  per: string;
}

interface Badge {
  enable: boolean;
  text: string;
}

interface CTA {
  enable: boolean;
  text: string;
  link: string;
}

interface Plan {
  title: string;
  description: string;
  price_prefix: string;
  features: string[];
  price: {
    yearly: Price;
    monthly: Price;
  };
  badge: Badge;
  cta: CTA;
}

interface PricingPlanContent {
  badge: string;
  title: string;
  heading: string;
  subtitle: string;
  plans_labels: string[];
  discount: string;
  plans: Plan[];
}

const { isPageHeader } = Astro.props;
const { title, subtitle, discount, plans, plans_labels, badge }: PricingPlanContent = (
  await getEntry("sections", "pricing")
).data;
---

<section class="section">
  <div class="container">
    <div class="section-container">
      {
        !isPageHeader && (
          <div class="section-intro text-center">
            {badge && (
              <div
                class="badge badge-gradient section-badge"
                set:html={badge}
                data-aos="fade-up-sm"
                data-aos-delay="100"
              />
            )}
            <h2 class="title text-balance lg:col-8 mx-auto" data-aos="fade-up-sm" data-aos-delay="150">
              {title}
            </h2>
            <p
              class="subtitle lg:col-8 mx-auto"
              set:html={markdownify(subtitle)}
              data-aos="fade-up-sm"
              data-aos-delay="250"
            />
          </div>
        )
      }

      <div class="section-content">
        <div class="flex items-center justify-center gap-5 mb-8" data-aos="fade-up-sm" data-aos-delay="250">
          <div class="flex items-center gap-4">
            <span class="text-sm text-dark/90">{plans_labels[0]}</span>
            <label class="inline-flex items-center cursor-pointer" for="pricing-switch">
              <input
                type="checkbox"
                value=""
                id="pricing-switch"
                aria-label="pricing switch"
                class="sr-only peer pricing-check"
              />
              <div
                class="relative w-[48px] h-[24px] bg-dark transition-colors duration-500 peer-focus:outline-none rounded-full peer peer-checked:after:translate-x-[22px] rtl:peer-checked:after:-translate-x-[20px] peer-checked:after:border-white after:content-[''] after:absolute after:top-[3px] after:start-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-[18px] after:w-[18px] after:transition-all after:duration-500 after:ease-in-out peer-checked:bg-secondary"
              >
              </div>
            </label>
            <span class="text-sm text-dark/90">{plans_labels[1]}</span>
          </div>
          <span class="text-white bg-tertiary text-sm py-1 px-3 rounded-full uppercase">Up to {discount} off</span>
        </div>
        <div class="grid md:grid-cols-2 xl:grid-cols-3 justify-center gap-6">
          {
            plans &&
              plans.length &&
              plans.map((plan, index) => {
                const isEvenIndex = index % 2 !== 0;
                return (
                  <div
                    data-aos="fade-up-sm"
                    data-aos-delay={index * 200}
                    class:list={[
                      "py-8 px-6 rounded-2xl flex flex-col justify-between relative border transition-all duration-500 border-transparent hover:border-border",
                      { "bg-gradient-to-tl from-gradient_stop/50 to-gradient_start/50 ": isEvenIndex },
                      { "bg-theme-light ": !isEvenIndex },
                    ]}
                  >
                    <div>
                      <h3 class:list={["h5 mb-2 font-medium text-lg text-dark"]}>
                        <span>{markdownify(plan.title)}</span>
                      </h3>
                      <p set:html={markdownify(plan.description)} />
                      <div class="flex items-center flex-wrap gap-2 mt-6">
                        {/* PRICE NUMBERS */}
                        <div class="flex flex-col gap-2">
                          <div class:list={["flex items-center text-dark"]}>
                            <h3 class="font-medium">
                              <span>{plan.price_prefix}</span>
                              <span
                                class="data-count"
                                data-count-yearly={plan.price.yearly.amount}
                                data-count-monthly={plan.price.monthly.amount}
                                set:html={plan.price.monthly.amount}
                              />
                            </h3>
                            {/* BADGE */}

                            {plan.badge.enable && (
                              <div
                                class:list={[" bg-tertiary text-sm py-1 px-3 rounded-full uppercase ml-5 text-white"]}
                              >
                                <span class="">{plan.badge.text}</span>
                              </div>
                            )}
                          </div>
                          <div class="flex text-dark gap-1 text-sm">
                            <span class="text-monthly">/per {plan.price.monthly.period}</span>
                            <span class="text-monthly">/per {plan.price.monthly.per}</span>
                            <span class="text-yearly hidden">/per {plan.price.yearly.period}</span>
                            <span class="text-yearly hidden">/per {plan.price.yearly.per}</span>
                          </div>
                        </div>
                      </div>
                      {/* CTA BUTTON */}
                      {plan.cta.enable && (
                        <div class="mt-10">
                          <PrimaryButton isFullWidth="true" as="a" link={plan.cta.link} label={plan.cta.text} />
                        </div>
                      )}
                      <div class="mt-10">
                        <h4 class="mb-6 text-base font-primary font-medium">What's Included</h4>
                        <ul class="pricing-feature-list">
                          {plan.features &&
                            plan.features.length &&
                            plan.features.map((feature, index) => {
                              return <li>{feature}</li>;
                            })}
                        </ul>
                      </div>
                    </div>
                  </div>
                );
              })
          }
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  function pricingInit() {
    // Select the toggle switch element
    const toggleSwitch = document.querySelector<HTMLInputElement>(".pricing-check");
    const numbers = document.querySelectorAll<HTMLDivElement>(".data-count");
    toggleSwitch &&
      toggleSwitch.addEventListener("change", function () {
        if (toggleSwitch.checked) {
          numbers.forEach(function (number) {
            const yearlyCount = number.getAttribute("data-count-yearly");
            if (yearlyCount) {
              number.innerHTML = yearlyCount;
              animateCounter(number, parseInt(yearlyCount, 10));
            }
          });
          toggleVisibility(".text-yearly", "d-block", "hidden");
          toggleVisibility(".text-monthly", "hidden", "d-block");
        } else {
          numbers.forEach(function (number) {
            const monthlyCount = number.getAttribute("data-count-monthly");
            if (monthlyCount) {
              number.innerHTML = monthlyCount;
              animateCounter(number, parseInt(monthlyCount, 10));
            }
          });
          toggleVisibility(".text-monthly", "block", "hidden");
          toggleVisibility(".text-yearly", "hidden", "d-block");
        }
      });

    function animateCounter(element: HTMLElement, endValue: number) {
      let startValue = 0;
      const duration = 300;
      let startTime: number | null = null;

      function step(currentTime: number) {
        if (!startTime) startTime = currentTime;
        const progress = currentTime - startTime;
        const value = Math.min(progress / duration, 1) * (endValue - startValue) + startValue;
        element.innerHTML = Math.ceil(value).toString();
        if (progress < duration) {
          requestAnimationFrame(step);
        }
      }

      requestAnimationFrame(step);
    }

    function toggleVisibility(selector: string, addClass: string, removeClass: string) {
      const elements = document.querySelectorAll<HTMLElement>(selector);
      elements.forEach(function (element) {
        element.classList.add(addClass);
        element.classList.remove(removeClass);
      });
    }
  }
  document.addEventListener("astro:page-load", pricingInit);
</script>
